import asyncio
import logging

import aiohttp
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types.dice import DiceEmoji
from googletrans import Translator

from config_data.config import load_config
from database.database import Rating
from lexicon.lexicon import LEXICON

router = Router()
config = load_config()

logger = logging.getLogger(__name__)


async def translate_text(text, dest_language):
    loop = asyncio.get_event_loop()
    translator = Translator()
    translation = await loop.run_in_executor(None, translator.translate, text, dest_language)
    return translation


@router.message(Command(commands='rating'))
async def cmd_rating(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ Rating
    if not Rating:
        await message.answer("–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    res = "–†–µ–π—Ç–∏–Ω–≥:\n"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    sorted_rating = sorted(Rating.values(), key=lambda x: x[1], reverse=True)

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    for i, (user, score) in enumerate(sorted_rating, start=1):
        res += f"{i} –º–µ—Å—Ç–æ: {user} [{score}] –±–∞–ª–ª(–æ–≤)\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(res)


@router.message(Command(commands='help'))
async def cmd_help(message: Message):
    await message.reply(LEXICON['/help'])


@router.message(Command(commands='contact'))
async def cmd_contact(message: Message):
    await message.answer(LEXICON['/contact'])


@router.message(Command(commands='random'))
async def cmd_random(message: Message):
    await message.reply_dice(emoji=DiceEmoji.DICE)


@router.message(Command(commands='fact'))
async def cmd_fact(message: Message):
    api_url = 'https://api.api-ninjas.com/v1/facts'

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(api_url, headers={'X-Api-Key': config.tg_bot.api_key}) as response:
                if response.status == 200:
                    data = await response.json()

                    if data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                        fact = data[0]['fact']
                        try:
                            translation = await translate_text(fact, "ru")
                            if translation is not None and hasattr(translation, 'text'):
                                await message.reply(f'<b>{translation.text}</b>')
                            else:
                                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–∞–∫—Ç üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        except Exception as e:
                            logger.exception(f"Translation error: {e}")
                            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–∞–∫—Ç üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    else:
                        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    await message.reply(LEXICON['error_fact'])
        except Exception as e:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.info(f"Error fetching FACT: {e}")


@router.message(Command(commands='joke'))
async def cmd_joke(message: Message):
    api_url = 'https://api.api-ninjas.com/v1/jokes'

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(api_url, headers={'X-Api-Key': config.tg_bot.api_key}) as response:
                if response.status == 200:
                    data = await response.json()

                    if data:
                        jokes = data[0]['joke']
                        try:
                            translation = await translate_text(jokes, "ru")
                            if translation is not None and hasattr(translation, 'text'):
                                await message.reply(f'<b>{translation.text}</b>')
                            else:
                                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à—É—Ç–∫—É üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        except Exception as e:
                            logger.exception(f"Translation error: {e}")
                            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —à—É—Ç–∫—É üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    else:
                        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    await message.reply(LEXICON['error_fact'])
        except Exception as e:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.info(f"Error fetching JOKE: {e}")


@router.message(Command(commands='riddles'))
async def cmd_riddles(message: Message):
    api_url = 'https://api.api-ninjas.com/v1/riddles'

    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(api_url, headers={'X-Api-Key': config.tg_bot.api_key}) as response:
                if response.status == 200:
                    data = await response.json()

                    if data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
                        riddles = data[0]['question']
                        answer_text = data[0]['answer']

                        try:
                            question_translation = await translate_text(riddles, "ru")
                            answer_translation = await translate_text(answer_text, "ru")

                            if question_translation is not None and hasattr(question_translation, 'text') and \
                                    answer_translation is not None and hasattr(answer_translation, 'text'):
                                await message.reply(f'<b>{question_translation.text}</b>\n\n'
                                                    f'–û—Ç–≤–µ—Ç –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥')
                                await asyncio.sleep(15)
                                await message.reply(f'<b>{answer_translation.text}</b>')
                            else:
                                await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–≥–∞–¥–∫—É üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        except Exception as e:
                            logger.exception(f"Translation error: {e}")
                            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–≥–∞–¥–∫—É üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    else:
                        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                else:
                    await message.reply(LEXICON['error_fact'])
        except Exception as e:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–∞–¥–∫—É üòû, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.info(f"Error fetching RIDDLE: {e}")
